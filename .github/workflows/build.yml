name: Build and Deploy

on:
  push:
    branches: [master]

env:
  # Use GitHub variables and secrets
  DOCKERFILE_PATH: ${{ vars.DOCKERFILE_PATH }}
  IMAGE_NAME: ${{ vars.IMAGE_NAME }}
  GITOPS_REPO: ${{ vars.GITOPS_REPO }}
  GITOPS_BRANCH: ${{ vars.GITOPS_BRANCH }}
  GITOPS_FILE_PATH: ${{ vars.GITOPS_FILE_PATH }}

jobs:
  test:
    runs-on: [self-hosted, arc-pi]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        install: true
    
    - name: Build and test
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ env.DOCKERFILE_PATH }}
        target: build
        platforms: linux/amd64
        push: false
        build-args: |
          NUGET_FEED_URL=${{ secrets.NUGET_FEED_URL }}
          NUGET_USER=${{ secrets.NUGET_USERNAME }}
          NUGET_PASS=${{ secrets.NUGET_PASSWORD }}
        load: true
        tags: uwuconverter-test:latest
    
    - name: Run tests
      run: |
        docker run --rm uwuconverter-test:latest \
          dotnet test "./UwUConverter.Test/UwUConverter.Tests.csproj" --no-restore --verbosity minimal

  build-and-push:
    needs: test
    runs-on: [self-hosted, arc-pi]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx  
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container
        install: true
    
    - name: Log in to Docker Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push to registry
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ${{ env.DOCKERFILE_PATH }}
        platforms: linux/amd64
        push: true
        build-args: |
          NUGET_FEED_URL=${{ secrets.NUGET_FEED_URL }}
          NUGET_USER=${{ secrets.NUGET_USERNAME }}
          NUGET_PASS=${{ secrets.NUGET_PASSWORD }}
        tags: |
          ${{ secrets.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:v1.0.${{ github.run_number }}

  update-gitops:
    needs: build-and-push
    runs-on: [self-hosted, arc-pi]
    
    steps:
    - uses: actions/checkout@v4
      with:
        repository: ${{ env.GITOPS_REPO }}
        ref: ${{ env.GITOPS_BRANCH }}
        token: ${{ secrets.GITOPS_TOKEN }}
        path: gitops-repo
    
    - name: Install PyYAML
      run: |
        # Use system Python and install PyYAML
        python3 --version
        pip3 install --user PyYAML
    
    - name: Update deployment YAML
      run: |
        python3 << 'EOF'
        import yaml
        
        yaml_path = f"gitops-repo/${{ env.GITOPS_FILE_PATH }}"
        new_image = f"${{ secrets.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:v1.0.${{ github.run_number }}"
        
        with open(yaml_path, 'r') as file:
            deployment = yaml.safe_load(file)
        
        # Update the image tag
        if 'spec' in deployment and 'template' in deployment['spec']:
            deployment['spec']['template']['spec']['containers'][0]['image'] = new_image
        elif 'image' in deployment:
            deployment['image'] = new_image
        else:
            print("Could not find image field in deployment YAML")
            exit(1)
        
        with open(yaml_path, 'w') as file:
            yaml.dump(deployment, file, default_flow_style=False)
        
        print(f"Updated {yaml_path} with image: {new_image}")
        EOF
    
    - name: Commit and push changes
      run: |
        cd gitops-repo
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add ${{ env.GITOPS_FILE_PATH }}
        git commit -m "Update ${{ env.IMAGE_NAME }} to v1.0.${{ github.run_number }} (commit: ${{ github.sha }})"
        git push

  notify-discord:
    if: always()  # Run regardless of previous job status
    needs: [test, build-and-push, update-gitops]
    runs-on: [self-hosted, arc-pi]
    
    steps:
    - name: Notify Discord on Success
      if: needs.test.result == 'success' && needs.build-and-push.result == 'success' && needs.update-gitops.result == 'success'
      run: |
        curl -H "Content-Type: application/json" \
             -d '{
               "embeds": [{
                 "title": "✅ UwU Converter Build Successful",
                 "description": "Master branch build and deployment completed successfully!",
                 "color": 3066993,
                 "fields": [
                   {
                     "name": "Repository",
                     "value": "${{ github.repository }}",
                     "inline": true
                   },
                   {
                     "name": "Commit",
                     "value": "`${{ github.sha }}`",
                     "inline": true
                   },
                   {
                     "name": "Image Tag",
                     "value": "${{ secrets.DOCKER_REGISTRY }}/${{ vars.IMAGE_NAME }}:v1.0.${{ github.run_number }}",
                     "inline": false
                   }
                 ],
                 "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
               }]
             }' \
             "${{ secrets.DISCORD_BUILD_NOTIFY_WEBHOOK }}"
    
    - name: Notify Discord on Failure
      if: needs.test.result == 'failure' || needs.build-and-push.result == 'failure' || needs.update-gitops.result == 'failure'
      run: |
        curl -H "Content-Type: application/json" \
             -d '{
               "embeds": [{
                 "title": "❌ UwU Converter Build Failed",
                 "description": "Master branch build or deployment failed!",
                 "color": 15158332,
                 "fields": [
                   {
                     "name": "Repository",
                     "value": "${{ github.repository }}",
                     "inline": true
                   },
                   {
                     "name": "Commit",
                     "value": "`${{ github.sha }}`",
                     "inline": true
                   },
                   {
                     "name": "Failed Jobs",
                     "value": "Test: ${{ needs.test.result }}\nBuild: ${{ needs.build-and-push.result }}\nDeploy: ${{ needs.update-gitops.result }}",
                     "inline": false
                   },
                   {
                     "name": "Action URL",
                     "value": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}",
                     "inline": false
                   }
                 ],
                 "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
               }]
             }' \
             "${{ secrets.DISCORD_BUILD_NOTIFY_WEBHOOK }}"
